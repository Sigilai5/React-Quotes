{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","props","handleInputChange","inputName","value","nextValue","setState","console","log","state","addEvent","newArray","quotes","push","id","length","your_name","quote","author","handleDelete","eventId","filter","e","toggleModal","modal","up","down","Fragment","md","color","onClick","this","icon","className","map","key","upvotes","downvotes","onDelete","isOpen","toggle","titleClass","name","label","hint","group","type","getValue","Component","Quote","xs","outline","rounded","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aecf5d22.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport * as serviceWorker from './serviceWorker';\nimport {MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter, MDBIcon, MDBBadge, MDBContainer, MDBRow, MDBCol} from \"mdbreact\";\nimport {render} from \"@testing-library/react\";\n\n\n\n\n\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            modal:false,\n            quotes:[\n                {id:1,your_name: \"Brian Sigilai\", quote: \"Always the stairs,never the escalator!\", author:\"Casey Neistat\",up:0,down:0},\n                {id:2,your_name: \"Alex James\", quote: \"Give all you got!\", author:\"Jayme\",up:0,down:0},\n            ]\n        };\n    }\n\n\n\n    //Handles input ands sets value to the current state\n\n    handleInputChange = inputName => value => {\n        const nextValue = value;\n        this.setState({\n           [inputName]: nextValue\n        });\n        console.log(this.state)\n    };\n\n\n    //adds item to state\n    addEvent = () => {\n      var newArray = [...this.state.quotes];\n      newArray.push({\n         id:newArray.length ? newArray[newArray.length - 1].id + 1 :1,\n         your_name:this.state.your_name,\n         quote:this.state.quote,\n         author:this.state.author,\n      });\n      this.setState({quotes: newArray});\n      this.setState({\n          your_name:\"\",\n          quote:\"\",\n          author:\"\",\n      });\n\n    };\n\n    //deletes values\n    handleDelete = eventId => {\n      const quotes = this.state.quotes.filter(e =>e.id != eventId);\n      this.setState({quotes})\n    };\n\n    toggleModal = () => {\n        this.setState({\n           modal: !this.state.modal\n        });\n    };\n\n\n    render(){\n        return(\n            <React.Fragment>\n\n                <MDBContainer>\n\n                    <MDBRow>\n\n                        <MDBCol md=\"3\">\n                            <MDBBtn color=\"primary\" onClick={this.toggleModal}>\n                                <MDBIcon icon=\"magic\" className=\"mr-1\" /> Add Quote\n                            </MDBBtn>\n                        </MDBCol>\n\n                        <MDBCol md=\"9\">\n                            <h3 className=\"text-uppercase my-3\">Quotes</h3>\n                            {this.state.quotes.map(quote => (\n                                <Quote\n                                    key={quote.id}\n                                    id={quote.id}\n                                    your_name={quote.your_name}\n                                    quote={quote.quote}\n                                    author={quote.author}\n                                    upvotes={quote.up}\n                                    downvotes={quote.down}\n                                    onDelete={this.handleDelete}\n                                />\n\n\n                            ))}\n\n\n                        </MDBCol>\n\n                    </MDBRow>\n\n                </MDBContainer>\n\n                <MDBModal isOpen={this.state.modal} toggle={this.toggleModal}>\n                    <MDBModalHeader\n                        className=\"text-center\"\n                        titleClass=\"w-100 font-weight-bold\"\n                        toggle={this.toggleModal}\n                    >\n                        New Quote\n                    </MDBModalHeader>\n                    <MDBModalBody>\n                        <form className=\"mx-3 grey-text\">\n                            <MDBInput\n                                name=\"your_name\"\n                                label=\"Your Name\"\n                                icon=\"user\"\n                                hint=\"John Doe\"\n                                group type=\"text\"\n                                getValue={this.handleInputChange(\"your_name\")}\n\n                            />\n\n                            <MDBInput\n                                name=\"quote\"\n                                label=\"Quote\"\n                                icon=\"edit\"\n                                hint=\"Give me Liberty!\"\n                                group type=\"text\"\n                                getValue={this.handleInputChange(\"quote\")}\n                            />\n\n                            <MDBInput\n                                name=\"author\"\n                                label=\"Author (optional)\"\n                                icon=\"user-tie\"\n                                group\n                                type=\"text\"\n                                getValue={this.handleInputChange(\"author\")}\n\n                            />\n\n\n                        </form>\n                    </MDBModalBody>\n                    <MDBModalFooter className=\"justify-content-center\">\n                        <MDBBtn\n                            color=\"info\"\n                            onClick={() => {\n                                this.toggleModal();\n                                this.addEvent();\n                            }}\n                        >\n                            Add\n                        </MDBBtn>\n\n                    </MDBModalFooter>\n                </MDBModal>\n\n\n            </React.Fragment>\n        )\n    }\n};\n\n\nclass Quote extends Component{\n\n    render() {\n        return (\n            <React.Fragment>\n                <h4>{this.props.your_name}</h4>\n                <h6>{this.props.quote}</h6>\n\n                {this.props.author && (\n                    <React.Fragment>\n                        <i>{this.props.author}</i>\n                    </React.Fragment>\n                )}\n\n                <MDBContainer>\n                <MDBRow>\n                    <MDBCol xs=\"6\" className=\"text-center\">\n                    <MDBBtn color=\"primary\" outline rounded ><MDBIcon color=\"primary\" icon=\"thumbs-up\" />{this.props.upvotes}</MDBBtn>\n\n                    <MDBBtn rounded outline color=\"danger\"><MDBIcon color=\"primary\" icon=\"thumbs-down\" />{this.props.downvotes}</MDBBtn>\n\n\n                        <MDBBtn rounded color=\"danger\" onClick={() => this.props.onDelete(this.props.id)}>Delete</MDBBtn>\n\n                    </MDBCol>\n\n\n                </MDBRow>\n                </MDBContainer>\n\n\n            </React.Fragment>\n        )\n    }\n}\n\n\n\n\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}